#!/bin/bash

# Script to perform binary search on clj-kondo releases to find the first release
# that breaks the clj-kondo-hooks tests.
#
# Usage: ./script/bisect-release

set -e

CLJ_KONDO_REPO="/tmp/clj-kondo-repo"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

echo "=== clj-kondo Release Binary Search ==="
echo ""

# Ensure clj-kondo repo is cloned
if [ ! -d "$CLJ_KONDO_REPO" ]; then
    echo "Cloning clj-kondo repository..."
    git clone https://github.com/clj-kondo/clj-kondo.git "$CLJ_KONDO_REPO"
fi

cd "$CLJ_KONDO_REPO"
git fetch origin --tags

# Get all release tags from 2024-2025, sorted by version
echo "Finding release tags..."
RELEASE_TAGS=$(git tag --sort=version:refname | grep "^v202[45]")
RELEASE_ARRAY=($RELEASE_TAGS)
TOTAL_RELEASES=${#RELEASE_ARRAY[@]}

echo "Total releases found: $TOTAL_RELEASES"
echo "Release range: ${RELEASE_ARRAY[0]} to ${RELEASE_ARRAY[$((TOTAL_RELEASES - 1))]}"
echo ""

# Test a specific release
test_release() {
    local version=$1
    local version_num="${version#v}"  # Remove 'v' prefix
    
    echo "Testing release: $version ($version_num)"
    
    # Install the release
    cd /tmp
    curl -sLO "https://github.com/clj-kondo/clj-kondo/releases/download/${version}/clj-kondo-${version_num}-linux-static-amd64.zip" 2>/dev/null
    
    if [ $? -ne 0 ]; then
        echo "  Result: SKIP (release not available)"
        return 2
    fi
    
    mkdir -p /tmp/clj-kondo-install
    unzip -o "clj-kondo-${version_num}-linux-static-amd64.zip" -d /tmp/clj-kondo-install > /dev/null 2>&1
    rm "clj-kondo-${version_num}-linux-static-amd64.zip"
    
    # Verify version
    local installed_version=$(/tmp/clj-kondo-install/clj-kondo --version 2>/dev/null || echo "unknown")
    
    # Run the test
    cd "$PROJECT_DIR"
    export PATH="/tmp/clj-kondo-install:/tmp/bb-install:/tmp/clojure-install/bin:$PATH"
    
    # Copy configs
    rm -rf .clj-kondo/org.typedclojure
    mkdir -p .clj-kondo/org.typedclojure/typed.clj.runtime
    cp -r ../../typed/clj.runtime/resources/clj-kondo.exports/org.typedclojure/typed.clj.runtime/* .clj-kondo/org.typedclojure/typed.clj.runtime/
    
    set +e
    ./script/lint > /tmp/test-output 2>&1
    md5sum output/expected-output /tmp/test-output > /tmp/md5sums 2>&1
    
    # Compare md5 hashes
    local expected_md5=$(awk '{print $1; exit}' /tmp/md5sums)
    local actual_md5=$(awk '{print $1}' /tmp/md5sums | tail -1)
    set -e
    
    if [ "$expected_md5" = "$actual_md5" ]; then
        echo "  Result: GOOD ✓"
        return 0
    else
        echo "  Result: BAD ✗"
        return 1
    fi
}

# Binary search
left=0
right=$((TOTAL_RELEASES - 1))
first_bad=-1

echo "Starting binary search..."
echo ""

while [ $left -le $right ]; do
    mid=$(((left + right) / 2))
    release="${RELEASE_ARRAY[$mid]}"
    
    echo "[$((mid + 1))/$TOTAL_RELEASES] Checking midpoint..."
    
    result=0
    test_release "$release" || result=$?
    
    if [ $result -eq 2 ]; then
        # Skip this release, try the next one
        left=$((mid + 1))
    elif [ $result -eq 0 ]; then
        # This release is good, search in the right half
        left=$((mid + 1))
    else
        # This release is bad, search in the left half
        first_bad=$mid
        right=$((mid - 1))
    fi
    echo ""
done

# Report results
cd "$CLJ_KONDO_REPO"
echo "=== Binary Search Complete ==="
echo ""

if [ $first_bad -ge 0 ]; then
    BAD_RELEASE="${RELEASE_ARRAY[$first_bad]}"
    echo "First BAD release found: $BAD_RELEASE"
    echo ""
    
    # Get commit for this release
    BAD_COMMIT=$(git rev-parse "$BAD_RELEASE")
    echo "Release commit: $BAD_COMMIT"
    echo ""
    
    if [ $first_bad -gt 0 ]; then
        GOOD_RELEASE="${RELEASE_ARRAY[$((first_bad - 1))]}"
        GOOD_COMMIT=$(git rev-parse "$GOOD_RELEASE")
        echo "Previous GOOD release: $GOOD_RELEASE"
        echo "Previous GOOD commit:  $GOOD_COMMIT"
        echo ""
        echo "To find the exact commit that introduced the bug, run:"
        echo "  cd $PROJECT_DIR"
        echo "  ./script/bisect-commit $GOOD_COMMIT $BAD_COMMIT"
    else
        echo "This is the first release tested. Cannot determine previous good release."
    fi
else
    echo "No bad release found in the range. All releases passed!"
fi
